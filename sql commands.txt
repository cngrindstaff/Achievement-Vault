CREATE TABLE Games (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    FriendlyName VARCHAR(100) NOT NULL,
    HasDataTable BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE Sections (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    GameID INT NOT NULL,
    FOREIGN KEY (GameID) REFERENCES Games(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE Records (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Description VARCHAR(250),
    SectionID INT NOT NULL,
    GameID INT NOT NULL,
    NumberOfCheckboxes INT NOT NULL DEFAULT 0,
    NumberAlreadyCompleted INT NOT NULL DEFAULT 0,
    FOREIGN KEY (SectionID) REFERENCES Sections(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (GameID) REFERENCES Games(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


ALTER TABLE Sections
ADD ListOrder INT NOT NULL DEFAULT 0;

ALTER TABLE Records
ADD ListOrder INT NOT NULL DEFAULT 0;

ALTER TABLE Records
ADD LongDescription VARCHAR(1000);

***********


DELIMITER $$

CREATE PROCEDURE GetAllGames()
BEGIN
    SELECT * FROM `achievement-vault`.Games;
END $$

DELIMITER ;


***********

DELIMITER $$

CREATE PROCEDURE GetAllSectionsByGameID(IN inputGameID INT)
BEGIN
    SELECT * FROM Sections
    WHERE GameID = inputGameID;
END $$

DELIMITER ;

***********

DELIMITER $$

CREATE PROCEDURE GetAllGameDataByGameID(IN inputGameID INT)
BEGIN
    SELECT 
        g.ID AS GameID,
        g.Name AS GameName,
        g.FriendlyName,
        
        s.Name AS SectionName,
        s.ListOrder AS SectionListOrder,
        
        r.ID AS RecordID,
        r.Name AS RecordName,
        r.Description AS RecordDescription,
        r.NumberOfCheckboxes,
        r.NumberAlreadyCompleted,
        r.ListOrder AS RecordListOrder,
        r.LongDescription AS RecordLongDescription

    FROM Games g
    LEFT JOIN Sections s ON g.ID = s.GameID
    LEFT JOIN Records r ON s.ID = r.SectionID
    WHERE g.ID = inputGameID;
END $$

DELIMITER ;

*****

DELIMITER $$

CREATE PROCEDURE GetAllRecordsBySectionID(IN inputSectionID INT)
BEGIN
    SELECT * FROM Records
    WHERE SectionID = inputSectionID;
END $$

DELIMITER ;


*****

DELIMITER $$

CREATE PROCEDURE UpdateRecord(
    IN inputRecordID INT,
    IN inputNumberAlreadyCompleted INT
)
BEGIN
    -- Check if the record exists
    IF NOT EXISTS (
        SELECT 1 FROM Records WHERE ID = inputRecordID
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Record not found.';
    ELSE
        -- Try to update the record
        UPDATE Records
        SET NumberAlreadyCompleted = inputNumberAlreadyCompleted
        WHERE ID = inputRecordID;

        -- Check if any row was actually updated
        IF ROW_COUNT() = 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error: Record exists but no update was performed.';
        END IF;
    END IF;
END $$

DELIMITER ;

*****


