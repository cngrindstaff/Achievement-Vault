sql_stored_procedures

************************************************

DELIMITER $$

CREATE PROCEDURE GetGameById(IN gameID INT)
BEGIN
    SELECT * FROM Games
    WHERE ID = gameID;
    
END $$

DELIMITER ;

************************************************

DELIMITER $$

CREATE PROCEDURE GetAllGames()
BEGIN
    SELECT * FROM `achievement-vault`.Games
	ORDER BY Name ASC;
END $$

DELIMITER ;

************************************************
(previously GetAllSectionsByGameID, GetAllGameSectionsByGameID)
DELIMITER $$

CREATE PROCEDURE "GetGameSectionsByGameID"(IN inputGameID INT, IN includeHiddenSections bool)
BEGIN
    -- Default to TRUE if NULL is passed
    IF includeHiddenSections IS NULL THEN
        SET includeHiddenSections = TRUE;
    END IF;
    
    SELECT * FROM GameSections
    WHERE GameID = inputGameID
    AND Hidden = includeHiddenSections
    ORDER BY ListOrder ASC, ID ASC;
END $$

DELIMITER ;

************************************************

(previously GetAllRecordsByGameID)
DELIMITER $$

CREATE DEFINER="doadmin"@"%" PROCEDURE "GetGameRecordsByGameSectionID"(
	IN inputSectionID INT,
    IN includeHiddenSections BOOL
)
BEGIN
    SELECT * FROM GameRecords
    WHERE SectionID = inputSectionID
    AND Hidden = includeHiddenSections
    ORDER BY ListOrder ASC, ID ASC;
END $$

DELIMITER ;

************************************************

DELIMITER $$

CREATE PROCEDURE GetAllGameDataByGameID(IN inputGameID INT)
BEGIN
    SELECT 
        g.ID AS GameID,
        g.Name AS GameName,
        g.FriendlyName,
        
        s.Name AS SectionName,
        s.ListOrder AS SectionListOrder,
        
        r.ID AS RecordID,
        r.Name AS RecordName,
        r.Description AS RecordDescription,
        r.NumberOfCheckboxes,
        r.NumberAlreadyCompleted,
        r.ListOrder AS RecordListOrder,
        r.LongDescription AS RecordLongDescription

    FROM Games g
    LEFT JOIN GameSections s ON g.ID = s.GameID
    LEFT JOIN GameRecords r ON s.ID = r.SectionID
    WHERE g.ID = inputGameID
	ORDER BY SectionListOrder ASC, RecordListOrder ASC, RecordName ASC;
END $$

DELIMITER ;

************************************************

(previously GetAllRecordsBySectionID)
DELIMITER $$

CREATE PROCEDURE GetAllGameRecordsByGameSectionID(IN inputSectionID INT)
BEGIN
    SELECT * FROM GameRecords
    WHERE SectionID = inputSectionID;
	ORDER BY ListOrder ASC, ID ASC;
END $$

DELIMITER ;

************************************************

DELIMITER $$

CREATE PROCEDURE GetAllGameTablesByGameID (IN inputGameID INT)
BEGIN
    SELECT * FROM GameTables
    WHERE GameID = inputGameID
    ORDER BY ListOrder ASC, Name ASC;
END $$

DELIMITER ;

************************************************

DELIMITER $$

CREATE PROCEDURE GetAllTableRecordsByTableID (IN inputTableID INT)
BEGIN
    SELECT * FROM GameTableRecords
    WHERE TableID = inputTableID
    ORDER BY ListOrder ASC, Field_01 ASC;
END $$

DELIMITER ;

************************************************

(previously UpdateRecord)

DELIMITER $$

CREATE PROCEDURE UpdateGameRecordCompletion(
    IN inputRecordID INT,
    IN inputNumberAlreadyCompleted INT
)
BEGIN
    -- Check if the record exists
    IF NOT EXISTS (
        SELECT 1 FROM GameRecords WHERE ID = inputRecordID
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: Record not found.';
    ELSE
        -- Try to update the record
        UPDATE GameRecords
        SET NumberAlreadyCompleted = inputNumberAlreadyCompleted
        WHERE ID = inputRecordID;

        -- Check if any row was actually updated
        IF ROW_COUNT() = 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error: Record exists but no update was performed.';
        END IF;
    END IF;
END $$

DELIMITER ;

************************************************

DELIMITER $$

CREATE PROCEDURE admin_GetUserPermissionsForStoredProcedures ()
BEGIN
	SELECT Routine_type, Routine_name, User, Host
	FROM mysql.procs_priv
	WHERE Db = DATABASE()
	AND Proc_priv = 'Execute'
	Order by Routine_name;
END $$

DELIMITER ;


************************************************


DELIMITER $$
CREATE PROCEDURE "GetGameRecordsByGameSectionIDWithOrdering"(
    IN inputSectionID INT,
    IN inputOrderPreference VARCHAR(50),
    IN includeHiddenSections BOOL
)
BEGIN
    -- Default to 'order-name' if NULL
    IF inputOrderPreference IS NULL THEN
        SET inputOrderPreference = 'order-name';
    END IF;

    -- Default to TRUE if NULL
    IF includeHiddenSections IS NULL THEN
        SET includeHiddenSections = TRUE;
    END IF;

    SET @sectionID = inputSectionID;
    SET @includeHidden = includeHiddenSections;

    -- Start building query
    SET @queryText = CONCAT(
        'SELECT * FROM GameRecords WHERE SectionID = ? AND ( ? = TRUE OR Hidden = FALSE ) ORDER BY ',
        CASE
            WHEN inputOrderPreference = 'order-name' THEN 'ListOrder ASC, Name ASC'
            WHEN inputOrderPreference = 'name' THEN 'Name ASC'
            WHEN inputOrderPreference = 'completed-order-name' THEN 'NumberAlreadyCompleted ASC, ListOrder ASC, Name ASC'
            ELSE 'ListOrder ASC, Name ASC'
        END
    );

    PREPARE stmt FROM @queryText;
    EXECUTE stmt USING @sectionID, @includeHidden;
    DEALLOCATE PREPARE stmt;
END $$
DELIMITER ;


************************************************

DELIMITER //

CREATE PROCEDURE InsertGameSection(
    IN sectionName VARCHAR(100),
    IN gameId INT,
    IN listOrder INT,
    IN recordOrderPreference VARCHAR(100),
    IN hidden TINYINT
)
BEGIN
    INSERT INTO GameSections
    (Name, GameID, ListOrder, RecordOrderPreference, Hidden)
    VALUES
    (sectionName, gameId, listOrder, recordOrderPreference, hidden);
END //

DELIMITER ;


GRANT EXECUTE ON PROCEDURE achievement_vault.InsertGameSection TO 'achievement_vault_user'@'%';




************************************************

The COALESCE function returns the first non-null value. This ensures that only non-null input parameters update the fields, leaving existing values unchanged if the input is NULL.

DELIMITER //

CREATE PROCEDURE UpdateGameSection(
    IN sectionId INT,
    IN gameId INT,
    IN sectionName VARCHAR(255),
    IN listOrder INT,
    IN recordOrderPreference VARCHAR(255),
    IN hidden TINYINT
)
BEGIN
    UPDATE GameSections
    SET 
        Name = COALESCE(sectionName, Name),
        ListOrder = COALESCE(listOrder, ListOrder),
        RecordOrderPreference = COALESCE(recordOrderPreference, RecordOrderPreference),
        Hidden = COALESCE(hidden, Hidden)
    WHERE 
        ID = sectionId AND GameID = gameId;
END //

DELIMITER ;


GRANT EXECUTE ON PROCEDURE achievement_vault.UpdateGameSection TO 'achievement_vault_user'@'%';


************************************************


DELIMITER //

CREATE PROCEDURE InsertGameRecord(
    IN recordName VARCHAR(100),
	IN description VARCHAR(1000),
	IN sectionId INT,
    IN gameId INT,
	IN numberOfCheckboxes INT,
	IN numberAlreadyCompleted INT,
    IN listOrder INT,
	IN longDescription VARCHAR(1000),
    IN hidden TINYINT
)
BEGIN
    INSERT INTO GameRecords
    (Name, Description, SectionId, GameID, NumberOfCheckboxes, NumberAlreadyCompleted, ListOrder, LongDescription, Hidden)
    VALUES
    (recordName, description, sectionId, GameID, numberOfCheckboxes, numberAlreadyCompleted, listOrder, longDescription, hidden);
END //

DELIMITER ;

GRANT EXECUTE ON PROCEDURE achievement_vault.InsertGameRecord TO 'achievement_vault_user'@'%';


************************************************


CREATE DEFINER="doadmin"@"%" PROCEDURE "UpdateGameRecord"(
    IN recordId INT,
    IN sectionId INT,
    IN recordName VARCHAR(100),
    IN description VARCHAR(1000),
    IN gameId INT,
    IN numberOfCheckboxes INT,
    IN numberAlreadyCompleted INT,
    IN listOrder INT,
    IN longDescription VARCHAR(1000),
    IN hidden TINYINT
)
BEGIN
    -- Declare all variables first
    DECLARE matchCount INT;

    -- Input validation
    IF recordId IS NULL OR sectionId IS NULL THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'recordId and sectionId cannot be NULL';
    END IF;

    -- Pre-check how many rows match
    SELECT COUNT(*) INTO matchCount
    FROM GameRecords
    WHERE SectionId = sectionId AND Id = recordId;

    IF matchCount = 0 THEN
        SIGNAL SQLSTATE '02000'
            SET MESSAGE_TEXT = 'No matching record found to update';
    ELSEIF matchCount > 1 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error: multiple records match the given RecordId and SectionId';
    END IF;

    -- Proceed to update exactly one row
    UPDATE GameRecords
    SET 
        Name = COALESCE(recordName, Name),
        Description = COALESCE(description, Description),
        GameID = COALESCE(gameId, GameID),
        NumberOfCheckboxes = COALESCE(numberOfCheckboxes, NumberOfCheckboxes),
        NumberAlreadyCompleted = COALESCE(numberAlreadyCompleted, NumberAlreadyCompleted),
        ListOrder = COALESCE(listOrder, ListOrder),
        LongDescription = COALESCE(longDescription, LongDescription),
        Hidden = COALESCE(hidden, Hidden)
    WHERE 
        SectionId = sectionId AND Id = recordId;
END

GRANT EXECUTE ON PROCEDURE achievement_vault.UpdateGameRecord TO 'achievement_vault_user'@'%';

************************************************

DELIMITER //

CREATE PROCEDURE UpdateGameSectionsListOrder(
    IN sectionUpdates JSON,
    OUT rowsUpdated INT
)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE n INT DEFAULT JSON_LENGTH(sectionUpdates);
    DECLARE sectionId INT;
    DECLARE listOrder INT;
    DECLARE totalRowsUpdated INT DEFAULT 0;

    WHILE i < n DO
        -- Extract the ID and ListOrder for this section
        SET sectionId = JSON_UNQUOTE(JSON_EXTRACT(sectionUpdates, CONCAT('$[', i, '].ID')));
        SET listOrder = JSON_UNQUOTE(JSON_EXTRACT(sectionUpdates, CONCAT('$[', i, '].ListOrder')));

        -- Update the row and count the affected rows
        UPDATE GameSections
        SET ListOrder = listOrder
        WHERE ID = sectionId;

        SET totalRowsUpdated = totalRowsUpdated + ROW_COUNT();

        SET i = i + 1;
    END WHILE;

    -- Return the total rows updated
    SET rowsUpdated = totalRowsUpdated;
END //

DELIMITER ;

GRANT EXECUTE ON PROCEDURE achievement_vault.UpdateGameSectionsListOrder TO 'achievement_vault_user'@'%';


************************************************


DELIMITER $$
CREATE DEFINER="doadmin"@"%" PROCEDURE "GetGameSectionById"(IN sectionId INT)
BEGIN
    SELECT * FROM GameSections
    WHERE ID = sectionId;
END$$
DELIMITER ;

GRANT EXECUTE ON PROCEDURE achievement_vault.GetGameSectionById TO 'achievement_vault_user'@'%';

************************************************

DELIMITER $$
CREATE DEFINER="doadmin"@"%" PROCEDURE "UpdateSectionRecordsListOrder"(
    IN recordUpdates JSON,
    OUT rowsUpdated INT
)
BEGIN
    DECLARE i INT DEFAULT 0;
    DECLARE n INT DEFAULT JSON_LENGTH(recordUpdates);
    DECLARE recordId INT;
    DECLARE listOrder INT;
    DECLARE totalRowsUpdated INT DEFAULT 0;

    WHILE i < n DO
        -- Extract the ID and ListOrder for this record
        SET recordId = JSON_UNQUOTE(JSON_EXTRACT(recordUpdates, CONCAT('$[', i, '].ID')));
        SET listOrder = JSON_UNQUOTE(JSON_EXTRACT(recordUpdates, CONCAT('$[', i, '].ListOrder')));

        -- Update the row and count the affected rows
        UPDATE GameRecords
        SET ListOrder = listOrder
        WHERE ID = recordId;

        SET totalRowsUpdated = totalRowsUpdated + ROW_COUNT();

        SET i = i + 1;
    END WHILE;

    -- Return the total rows updated
    SET rowsUpdated = totalRowsUpdated;
END$$
DELIMITER ;

GRANT EXECUTE ON PROCEDURE achievement_vault.UpdateSectionRecordsListOrder TO 'achievement_vault_user'@'%';


************************************************
DELIMITER //

CREATE PROCEDURE DeleteGameRecord(
    IN recordId INT
)
BEGIN
    DELETE FROM GameRecords
    WHERE ID = recordId;
END //

DELIMITER ;

GRANT EXECUTE ON PROCEDURE achievement_vault.DeleteGameRecord TO 'achievement_vault_user'@'%';



************************************************

DELIMITER $$

CREATE PROCEDURE GetGameRecordByRecordID(IN inputRecordID INT)
BEGIN
    SELECT * FROM GameRecords
    WHERE ID = inputRecordID;
    
END $$

DELIMITER ;



GRANT EXECUTE ON PROCEDURE achievement_vault.GetGameRecordByRecordID TO 'achievement_vault_user'@'%';


************************************************
